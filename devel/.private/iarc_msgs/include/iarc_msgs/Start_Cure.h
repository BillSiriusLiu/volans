// Generated by gencpp from file iarc_msgs/Start_Cure.msg
// DO NOT EDIT!


#ifndef IARC_MSGS_MESSAGE_START_CURE_H
#define IARC_MSGS_MESSAGE_START_CURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iarc_msgs
{
template <class ContainerAllocator>
struct Start_Cure_
{
  typedef Start_Cure_<ContainerAllocator> Type;

  Start_Cure_()
    : start_cure(0)  {
    }
  Start_Cure_(const ContainerAllocator& _alloc)
    : start_cure(0)  {
  (void)_alloc;
    }



   typedef int8_t _start_cure_type;
  _start_cure_type start_cure;





  typedef boost::shared_ptr< ::iarc_msgs::Start_Cure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iarc_msgs::Start_Cure_<ContainerAllocator> const> ConstPtr;

}; // struct Start_Cure_

typedef ::iarc_msgs::Start_Cure_<std::allocator<void> > Start_Cure;

typedef boost::shared_ptr< ::iarc_msgs::Start_Cure > Start_CurePtr;
typedef boost::shared_ptr< ::iarc_msgs::Start_Cure const> Start_CureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iarc_msgs::Start_Cure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iarc_msgs::Start_Cure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iarc_msgs::Start_Cure_<ContainerAllocator1> & lhs, const ::iarc_msgs::Start_Cure_<ContainerAllocator2> & rhs)
{
  return lhs.start_cure == rhs.start_cure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iarc_msgs::Start_Cure_<ContainerAllocator1> & lhs, const ::iarc_msgs::Start_Cure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iarc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iarc_msgs::Start_Cure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iarc_msgs::Start_Cure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iarc_msgs::Start_Cure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12fc1e224eb302516363b13510ed18b4";
  }

  static const char* value(const ::iarc_msgs::Start_Cure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12fc1e224eb30251ULL;
  static const uint64_t static_value2 = 0x6363b13510ed18b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iarc_msgs/Start_Cure";
  }

  static const char* value(const ::iarc_msgs::Start_Cure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 start_cure\n"
;
  }

  static const char* value(const ::iarc_msgs::Start_Cure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_cure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Start_Cure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iarc_msgs::Start_Cure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iarc_msgs::Start_Cure_<ContainerAllocator>& v)
  {
    s << indent << "start_cure: ";
    Printer<int8_t>::stream(s, indent + "  ", v.start_cure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IARC_MSGS_MESSAGE_START_CURE_H
