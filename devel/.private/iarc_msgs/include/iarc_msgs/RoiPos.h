// Generated by gencpp from file iarc_msgs/RoiPos.msg
// DO NOT EDIT!


#ifndef IARC_MSGS_MESSAGE_ROIPOS_H
#define IARC_MSGS_MESSAGE_ROIPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iarc_msgs
{
template <class ContainerAllocator>
struct RoiPos_
{
  typedef RoiPos_<ContainerAllocator> Type;

  RoiPos_()
    : detectornot(false)
    , dx(0.0)
    , dy(0.0)  {
    }
  RoiPos_(const ContainerAllocator& _alloc)
    : detectornot(false)
    , dx(0.0)
    , dy(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _detectornot_type;
  _detectornot_type detectornot;

   typedef double _dx_type;
  _dx_type dx;

   typedef double _dy_type;
  _dy_type dy;





  typedef boost::shared_ptr< ::iarc_msgs::RoiPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iarc_msgs::RoiPos_<ContainerAllocator> const> ConstPtr;

}; // struct RoiPos_

typedef ::iarc_msgs::RoiPos_<std::allocator<void> > RoiPos;

typedef boost::shared_ptr< ::iarc_msgs::RoiPos > RoiPosPtr;
typedef boost::shared_ptr< ::iarc_msgs::RoiPos const> RoiPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iarc_msgs::RoiPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iarc_msgs::RoiPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iarc_msgs::RoiPos_<ContainerAllocator1> & lhs, const ::iarc_msgs::RoiPos_<ContainerAllocator2> & rhs)
{
  return lhs.detectornot == rhs.detectornot &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iarc_msgs::RoiPos_<ContainerAllocator1> & lhs, const ::iarc_msgs::RoiPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iarc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iarc_msgs::RoiPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iarc_msgs::RoiPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iarc_msgs::RoiPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iarc_msgs::RoiPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iarc_msgs::RoiPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iarc_msgs::RoiPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iarc_msgs::RoiPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b3f1c225c207c4782cf386506f6493e";
  }

  static const char* value(const ::iarc_msgs::RoiPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b3f1c225c207c47ULL;
  static const uint64_t static_value2 = 0x82cf386506f6493eULL;
};

template<class ContainerAllocator>
struct DataType< ::iarc_msgs::RoiPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iarc_msgs/RoiPos";
  }

  static const char* value(const ::iarc_msgs::RoiPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iarc_msgs::RoiPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool detectornot\n"
"float64 dx\n"
"float64 dy\n"
;
  }

  static const char* value(const ::iarc_msgs::RoiPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iarc_msgs::RoiPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detectornot);
      stream.next(m.dx);
      stream.next(m.dy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoiPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iarc_msgs::RoiPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iarc_msgs::RoiPos_<ContainerAllocator>& v)
  {
    s << indent << "detectornot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detectornot);
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IARC_MSGS_MESSAGE_ROIPOS_H
